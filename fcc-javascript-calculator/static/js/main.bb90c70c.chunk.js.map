{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["initialState","numbers","operators","lastDisplay","viewDisplay","lastInput","signedNumber","inputCount","calculate","mode","Display","props","id","display","ResetPad","onClick","resetLastInput","resetCalculatorHandler","className","App","useState","state","setState","setDisplay","useEffect","numPadHandler","operatorPadHandler","console","log","resetCalculator","prevState","length","splice","slice","temp","tempNumbers","tempOperators","continueCalculate","parsedNumbers","map","number","parseFloat","i","push","result","reduce","previousNumber","currentNumber","index","toString","indexOf","isNaN","JSON","stringify","numberPads","input","numPadClickHandler","operatorPads","operator","operatorPadClickHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb90c70c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst initialState = {\n  numbers: [],\n  operators: [],\n  lastDisplay: \"\",\n  viewDisplay: \"\",\n  lastInput: \"\",\n  signedNumber: false,\n  inputCount: 0,\n  calculate: false,\n  mode: null\n}\n\nconst Display = (props) => {\n  return (\n    <div id=\"display\">\n      {props.display}\n    </div>\n  )\n}\n\nconst ResetPad = (props) => {\n  return (\n    <div id=\"reset\">\n      <button onClick={() => props.resetLastInput()}>C</button>\n      <button onClick={() => props.resetCalculatorHandler()} className='clear'>AC</button>\n    </div>\n  )\n}\n\nconst NumberPad = (props) => {\n  return (\n    <button onClick={() => props.numPadHandler(props.number)}>{props.number}</button>\n  )\n}\n\nfunction App() {\n  const [state, setState] = useState(initialState);\n\n  const [display, setDisplay] = useState('0');\n\n  useEffect(() => {\n    if (state.mode === \"numberPad\") {\n      numPadHandler();\n    }\n\n    if (state.mode === \"operatorPad\") {\n      operatorPadHandler();\n    }\n\n    return () => {\n\n    }\n  }, [state.inputCount, state.lastInput]);\n\n  useEffect(() => {\n\n    if (state.calculate) {\n      console.log(\"useEffect Calculate\")\n      calculate();\n    }\n\n    return () => {\n\n    }\n  }, [state.calculate])\n\n  useEffect(() => {\n    setDisplay(state.viewDisplay + state.lastDisplay);\n\n    return () => {\n    }\n  }, [state.lastDisplay, state.viewDisplay])\n\n  useEffect(() => {\n    console.log(\"useEffect Display: \", display)\n  }, [display])\n\n  const resetCalculator = () => {\n    setState(prevState => ({\n      ...prevState,\n      numbers: [],\n      operators: [],\n      lastDisplay: \"0\",\n      viewDisplay: \"\",\n      lastInput: \"\",\n      signedNumber: false,\n      calculate: false,\n      mode: null\n    }))\n    //setDisplay(prevState => \"0\")\n    // $(\"#view\").text(\"0\")\n  }\n\n  const resetLastInput = () => {\n    setState(prevState => ({\n      ...prevState,\n      lastDisplay: \"\",\n      lastInput: \"\",\n      calculate: false,\n      mode: null\n    }))\n\n    if (state.numbers.length <= state.operators.length) {\n      setState(prevState => ({\n        ...prevState,\n        operators: prevState.operators.splice(-1, 1),\n        viewDisplay: prevState.viewDisplay.slice(0, -1)\n      }))\n    }\n  }\n\n  const calculate = () => {\n    let temp = state.numbers[0];\n    const tempNumbers = [];\n    const tempOperators = [];\n    let continueCalculate = true;\n    const parsedNumbers = state.numbers.map((number) => parseFloat(number));\n    console.log(\"Numbers: \", parsedNumbers);\n    for (let i = 0; i < (state.operators.length); i++) {\n      switch (state.operators[i]) {\n        case \"*\":\n          continueCalculate = true;\n          temp *= parsedNumbers[i + 1];\n          console.log(\"Case 1\", temp);\n          break;\n        case \"/\":\n          continueCalculate = true;\n          temp /= parsedNumbers[i + 1];\n          console.log(\"Case 2\", temp);\n          break;\n        default:\n          console.log(\"Case Default\", temp);\n          if (continueCalculate) {\n            continueCalculate = false;\n            tempNumbers.push(parseFloat(temp));\n            tempOperators.push(state.operators[i]);\n            temp = parsedNumbers[i + 1];\n          } else {\n            temp = parsedNumbers[i + 1];\n            tempNumbers.push(parsedNumbers[i]);\n            tempOperators.push(state.operators[i]);\n          }\n      }\n    }\n    tempNumbers.push(temp);\n    let result = tempNumbers.reduce((previousNumber, currentNumber, index) => {\n      if (tempOperators[index - 1] === \"+\") {\n        console.log(previousNumber, currentNumber, index);\n        return previousNumber + currentNumber;\n      } else if (tempOperators[index - 1] === \"-\") {\n        console.log(previousNumber, currentNumber, index);\n        return previousNumber - currentNumber;\n      }\n    })\n    console.log(tempNumbers, tempOperators, result);\n    setState(prevState => ({\n      ...prevState,\n      numbers: [],\n      operators: [],\n      lastDisplay: result.toString(),\n      viewDisplay: \"\",\n      calculate: false\n    }))\n\n    //setDisplay(prevState => state.lastDisplay);\n    console.log(\"Last display: \", state.lastDisplay)\n    //$(\"#view\").text(lastDisplay);\n  }\n\n\n  const numPadClickHandler = (number) => {\n    setState(prevState => ({\n      ...prevState,\n      lastInput: number,\n      inputCount: prevState.inputCount++,\n      mode: 'numberPad'\n    }))\n  }\n\n  const operatorPadClickHandler = (operator) => {\n    setState(prevState => ({\n      ...prevState,\n      inputCount: prevState.inputCount++,\n      lastInput: operator,\n      mode: 'operatorPad'\n    }))\n  };\n\n  const numPadHandler = () => {\n    console.log(\"State: \", state, \"\\nDisplay: \", display);\n\n    if (state.lastDisplay + state.lastInput === \"00\") {\n      return;\n    }\n\n    console.log(\"Last display\", state.lastDisplay);\n\n    if ((state.lastInput === \".\") && (state.lastDisplay.indexOf(\".\") >= 0)) {\n      console.log(\"Double dots\");\n      return;\n    }\n\n    if (state.lastDisplay === \"0\" && (!!parseFloat(state.lastInput) > 0 || state.lastInput !== \".\")) {\n      setState(prevState => ({\n        ...prevState,\n        lastDisplay: \"\"\n      }))\n\n    }\n\n    if ((state.lastDisplay === \"\" || isNaN(state.lastDisplay)) && state.lastInput === \".\") {\n      setState(prevState => ({\n        ...prevState,\n        lastInput: \"0.\"\n      }))\n\n    }\n\n    if ((state.lastInput === \".\" && state.lastDisplay.slice(-1) === \".\") || (state.lastInput === \".\" && state.lastDisplay === \"\") || (state.lastInput === \".\" && isNaN(state.lastDisplay))) {\n      return;\n    }\n\n    if (isNaN(state.lastDisplay) && state.lastDisplay !== \"\" && state.numbers.length && !state.signedNumber) {\n      setState(prevState => ({\n        ...prevState,\n        operators: [...prevState.operators, prevState.lastDisplay],\n        viewDisplay: prevState.viewDisplay + prevState.lastDisplay,\n        lastDisplay: prevState.lastInput\n      }))\n\n      //console.log(\"First \", $(this).text());\n    } else {\n      if (state.lastDisplay !== \"\" && isNaN(state.lastDisplay) && state.viewDisplay !== \"\") {\n        //console.log(\"Test 1\");\n        setState(prevState => ({\n          ...prevState,\n          operators: [...prevState.operators, prevState.lastDisplay],\n          viewDisplay: prevState.viewDisplay + prevState.lastDisplay,\n          lastDisplay: \"-\" + prevState.lastInput,\n          signedNumber: false\n        }))\n      } else {\n        //console.log(\"Test 2\");\n        setState(prevState => ({\n          ...prevState,\n          lastDisplay: prevState.lastDisplay + prevState.lastInput\n        }))\n      }\n    }\n    //setDisplay(prevState => state.viewDisplay + state.lastDisplay);\n    //$(\"#view\").text(viewDisplay + lastDisplay);\n\n    console.log(\"Numbers\", state.numbers);\n    console.log(\"Operators\", state.operators);\n  }\n\n  const operatorPadHandler = () => {\n    console.log('State: ' + JSON.stringify(state))\n\n    if ((state.lastDisplay === \"\" || state.lastDisplay === \"-\") && state.lastInput !== \"-\" && state.viewDisplay === \"\") {\n      console.log(`(state.lastDisplay === \"\" || state.lastDisplay === \"-\") && state.lastInput !== \"-\" && state.viewDisplay === \"\"`)\n      return;\n    }\n\n    if (!state.numbers.length && !state.operators.length && parseFloat(state.lastDisplay + state.lastInput) === 0) {\n      console.log(`!state.numbers.length && !state.operators.length && parseFloat(state.lastDisplay + state.lastInput) === 0`)\n      resetCalculator();\n      return;\n    }\n\n    if (parseFloat(state.lastDisplay + state.lastInput) === 0) {\n      console.log(`parseFloat(state.lastDisplay + state.lastInput) === 0`)\n      resetLastInput({ display: state.lastInput, input: state.lastInput });\n      if (state.lastDisplay === \"=\") {\n        setState(prevState => ({\n          ...prevState,\n          lastInput: \"\",\n          lastDisplay: \"\"\n        }))\n      }\n      //setDisplay(prevState => (state.viewDisplay + state.lastDisplay));\n      //$(\"#view\").text(viewDisplay + lastDisplay);\n      return;\n    }\n\n    if (state.lastDisplay.slice(-1) === \".\") {\n      console.log(`state.lastDisplay.slice(-1) === \".\"`)\n      //console.log(\"Last Display\", state.lastDisplay.slice(-1), state.lastDisplay);\n      setState(prevState => ({\n        ...prevState,\n        lastDisplay: \"0\"\n      }))\n      //setDisplay(prevState => (state.viewDisplay + state.lastDisplay));\n      //$(\"#view\").text(viewDisplay + lastDisplay);\n    }\n\n    if (state.lastInput === \"=\") {\n      console.log(`state.lastInput === \"=\"`)\n      if (!isNaN(state.lastDisplay)) {\n        setState(prevState => ({\n          ...prevState,\n          calculate: true,\n          numbers: [...prevState.numbers, prevState.lastDisplay]\n        }))\n      }\n      return;\n    }\n\n\n    if (!isNaN(state.lastDisplay) && state.lastDisplay !== \"\") {\n      console.log(`!isNaN(state.lastDisplay) && state.lastDisplay !== \"\"`)\n      setState(prevState => ({\n        ...prevState,\n        numbers: [...prevState.numbers, prevState.lastDisplay],\n        viewDisplay: prevState.viewDisplay + parseFloat(prevState.lastDisplay).toString(),\n        lastDisplay: prevState.lastInput,\n        signedNumber: false\n      }))\n\n      //setDisplay(prevState => (state.viewDisplay + state.lastDisplay));\n      //$(\"#view\").text(viewDisplay + lastDisplay);\n\n      //console.log(\"First \", lastInput);\n    } else {\n      if (state.lastInput === \"-\" && isNaN(state.lastDisplay)) {\n        console.log(`state.lastInput === \"-\" && isNaN(state.lastDisplay)`)\n        setState(prevState => ({\n          ...prevState,\n          signedNumber: true\n        }))\n\n        // if (!state.numbers.length) {\n        //   console.log(`!state.numbers.length`)\n        //   setDisplay(prevState => (state.viewDisplay + state.lastDisplay));\n        //   $(\"#view\").text(viewDisplay + lastDisplay);\n        // } else {\n        //   console.log(`else`)\n        //   setDisplay(prevState => (state.viewDisplay + state.lastDisplay + state.lastInput));\n        //   $(\"#view\").text(viewDisplay + lastDisplay + lastInput);\n        // }\n\n      } else {\n        console.log(`else`)\n        setState(prevState => ({\n          ...prevState,\n          signedNumber: false,\n          lastDisplay: prevState.lastInput\n        }))\n        //setDisplay(prevState => (state.viewDisplay + state.lastDisplay));\n        //$(\"#view\").text(viewDisplay + lastDisplay);\n      }\n      //console.log(\"Second \", $(this).text());\n    }\n    console.log(\"Numbers\", state.numbers);\n    console.log(\"Operators\", state.operators);\n  }\n  const numbers = [\n    { className: \"seven\", input: \"7\" },\n    { className: \"eight\", input: \"8\" }, { className: \"nine\", input: \"9\" }, { className: \"four\", input: \"4\" }, { className: \"five\", input: \"5\" }, { className: \"six\", input: \"6\" }, { className: \"one\", input: \"1\" }, { className: \"two\", input: \"2\" }, { className: \"three\", input: \"3\" }, { className: \"zero\", input: \"0\" }, { className: \"decimal\", input: \".\" }\n  ];\n\n  const operators = [\n    { className: \"add\", input: \"+\" }, { className: \"subtract\", input: \"-\" }, { className: \"multiply\", input: \"*\" }, { className: \"divide\", input: \"/\" }, { className: \"equal\", input: \"=\" }\n  ];\n\n  const numberPads = numbers.map((number, index) =>\n    <button onClick={() => numPadClickHandler(number.input)} className={number.className} key={index}>{number.input}</button>\n  );\n\n  const operatorPads = operators.map((operator, index) =>\n    <button onClick={() => operatorPadClickHandler(operator.input)} className={operator.className} key={index}>{operator.input}</button>\n  );\n\n  return (\n    <div className=\"App\">\n      <Display display={display} />\n      <div id=\"keypad\">\n        <ResetPad resetCalculatorHandler={resetCalculator} resetLastInput={resetLastInput} />\n        <div id=\"numbers\">\n          {numberPads}\n        </div>\n        <div id=\"operations\">\n          {operatorPads}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}