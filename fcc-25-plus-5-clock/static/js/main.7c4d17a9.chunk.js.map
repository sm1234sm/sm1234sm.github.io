{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["initialState","work","rest","isRunning","isWorking","initialDisplay","minute","second","App","useState","state","setState","display","setDisplay","useEffect","console","log","padder","num","toString","padStart","callback","delay","intervalId","useRef","savedCallback","current","setInterval","clearInterval","useInterval","prevState","setTimer","checkConstraint","value","type","handleArrowButton","isWork","direction","ControlButton","props","onClick","handler","className","name","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAGMA,EAAe,CACnBC,KAAM,GACNC,KAAM,EACNC,WAAW,EACXC,WAAW,GAGPC,EAAiB,CACrBC,OAAQ,GACRC,OAAQ,GA2NKC,EAxNH,WAAO,IAAD,EACUC,mBAAST,GADnB,mBACTU,EADS,KACFC,EADE,OAEcF,mBAASJ,GAFvB,mBAETO,EAFS,KAEAC,EAFA,KAuBhBC,qBAAU,WACRC,QAAQC,IAAI,aACRN,EAAMN,UACRS,EAAW,CACTP,OAAQI,EAAMT,KACdM,OAAQ,IAGVM,EAAW,CACTP,OAAQI,EAAMR,KACdK,OAAQ,MAGX,CAACG,EAAMN,UAAWM,EAAMR,KAAMQ,EAAMT,OAEvC,IAAMgB,EAAS,SAACC,GACd,OAAOA,EAAIC,WAAWC,SAAS,EAAG,KAnChB,SAACC,EAAUC,GAC7B,IAAMC,EAAaC,iBAAO,MACpBC,EAAgBD,iBAAOH,GAE7BP,qBAAU,WACRW,EAAcC,QAAUL,KAG1BP,qBAAU,WAER,GAAqB,kBAAVQ,EAET,OADAC,EAAWG,QAAUC,aAFV,kBAAMF,EAAcC,YAEQJ,GAChC,kBAAMM,cAAcL,EAAWG,YAEvC,CAACJ,IAEGC,EAAWG,QAsBpBG,EAAY,WACNnB,EAAMP,YACJS,EAAQL,OAAS,GACnBM,GAAW,SAAAiB,GAAS,kCACfA,GADe,IAElBvB,OAAQuB,EAAUvB,OAAS,OAI3BK,EAAQL,OAAS,IACfK,EAAQN,OAAS,EACnBO,GAAW,SAAAiB,GAAS,kCACfA,GADe,IAElBxB,OAAQwB,EAAUxB,OAAS,EAC3BC,OAAQ,QAKVwB,QAIL,KAEH,IAAMA,EAAW,WAEfpB,GAAS,SAAAmB,GAAS,kCACbA,GADa,IAEhB1B,WAAY0B,EAAU1B,UACtBD,WAAW,QAqBT6B,EAAkB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAChC,MAAa,OAATA,EACED,EAAQ,EAAI,GAOL,SAATC,EACED,EAAQ,GAAK,OADnB,GASIE,EAAoB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UACnC,IAAK3B,EAAMP,UAAW,CACpB,GAAIiC,EACF,OAAQC,GACN,IAAK,KACH,GAAIL,EAAgB,CAAEC,MAAOvB,EAAMT,KAAMiC,KAAM,OAC7C,OAEFvB,GAAS,SAAAmB,GAAS,kCACbA,GADa,IAEhB7B,KAAM6B,EAAU7B,KAAO,OAEzB,MACF,IAAK,OACH,GAAI+B,EAAgB,CAAEC,MAAOvB,EAAMT,KAAMiC,KAAM,SAC7C,OAEFvB,GAAS,SAAAmB,GAAS,kCACbA,GADa,IAEhB7B,KAAM6B,EAAU7B,KAAO,YAM7B,OAAQoC,GACN,IAAK,KACH,GAAIL,EAAgB,CAAEC,MAAOvB,EAAMR,KAAMgC,KAAM,OAC7C,OAEFvB,GAAS,SAAAmB,GAAS,kCACbA,GADa,IAEhB5B,KAAM4B,EAAU5B,KAAO,OAEzB,MACF,IAAK,OACH,GAAI8B,EAAgB,CAAEC,MAAOvB,EAAMR,KAAMgC,KAAM,SAC7C,OAEFvB,GAAS,SAAAmB,GAAS,kCACbA,GADa,IAEhB5B,KAAM4B,EAAU5B,KAAO,OAM/Ba,QAAQC,IAAIN,GACZG,EAAW,CACTP,OAAQI,EAAMT,KACdM,OAAQ,MAKR+B,EAAgB,SAACC,GACrB,OACE,wBAAQC,QAASD,EAAME,QAASC,UAAWH,EAAMG,UAAjD,SAA6DH,EAAMI,QAIvE,OACE,qBAAKD,UAAU,MAAf,SACE,sBAAKE,GAAG,YAAR,UACE,sBAAKA,GAAG,QAAR,UACE,+BAAO3B,EAAOL,EAAQN,UADxB,IACwC,+BAAOW,EAAOL,EAAQL,aAE9D,sBAAKqC,GAAG,QAAR,UACE,cAACN,EAAD,CAAeG,QA7FH,WAClB9B,GAAS,SAAAmB,GAAS,kCACbA,GADa,IAEhB3B,WAAY2B,EAAU3B,gBA0FmBwC,KAAMjC,EAAMP,UAAY,QAAU,UACvE,cAACmC,EAAD,CAAeG,QAxGJ,WACjB9B,EAAS,eACJX,IAELa,EAAW,CACTP,OAAQI,EAAMT,KACdM,OAAQ,KAkGgCoC,KAAK,UACzC,uBACA,uBACA,uBAAMC,GAAG,OAAT,UACE,+BAAOlC,EAAMT,OACb,cAACqC,EAAD,CAAeG,QAAS,kBAAMN,EAAkB,CAAEC,QAAQ,EAAMC,UAAW,QAASM,KAAK,OACzF,cAACL,EAAD,CAAeG,QAAS,kBAAMN,EAAkB,CAAEC,QAAQ,EAAMC,UAAW,UAAWM,KAAK,YAE7F,uBAAMC,GAAG,OAAT,UACE,+BAAOlC,EAAMR,OACb,cAACoC,EAAD,CAAeG,QAAS,kBAAMN,EAAkB,CAAEC,QAAQ,EAAOC,UAAW,QAASM,KAAK,OAC1F,cAACL,EAAD,CAAeG,QAAS,kBAAMN,EAAkB,CAAEC,QAAQ,EAAOC,UAAW,UAAWM,KAAK,qBClMzFE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7c4d17a9.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nconst initialState = {\n  work: 25,\n  rest: 5,\n  isRunning: false,\n  isWorking: true,\n}\n\nconst initialDisplay = {\n  minute: 25,\n  second: 0\n}\n\nconst App = () => {\n  const [state, setState] = useState(initialState);\n  const [display, setDisplay] = useState(initialDisplay);\n\n  const useInterval = (callback, delay) => {\n    const intervalId = useRef(null);\n    const savedCallback = useRef(callback);\n\n    useEffect(() => {\n      savedCallback.current = callback;\n    });\n\n    useEffect(() => {\n      const tick = () => savedCallback.current();\n      if (typeof delay === 'number') {\n        intervalId.current = setInterval(tick, delay);\n        return () => clearInterval(intervalId.current);\n      }\n    }, [delay]);\n\n    return intervalId.current;\n  }\n\n  useEffect(() => {\n    console.log(\"useEffect\")\n    if (state.isWorking) {\n      setDisplay({\n        minute: state.work,\n        second: 0\n      })\n    } else {\n      setDisplay({\n        minute: state.rest,\n        second: 0\n      })\n    }\n  }, [state.isWorking, state.rest, state.work])\n\n  const padder = (num) => {\n    return num.toString().padStart(2, 0);\n  }\n\n  useInterval(() => {\n    if (state.isRunning) {\n      if (display.second > 0) {\n        setDisplay(prevState => ({\n          ...prevState,\n          second: prevState.second - 1\n        }))\n      }\n\n      if (display.second < 1) {\n        if (display.minute > 0) {\n          setDisplay(prevState => ({\n            ...prevState,\n            minute: prevState.minute - 1,\n            second: 59\n          }))\n        }\n        else {\n          //alert(\"Timer stopped\");\n          setTimer()\n        }\n      }\n    }\n  }, 1000);\n\n  const setTimer = () => {\n    //console.log(\"setTimer starts!\")\n    setState(prevState => ({\n      ...prevState,\n      isWorking: !prevState.isWorking,\n      isRunning: true,\n    }));\n  }\n\n  const resetTimer = () => {\n    setState({\n      ...initialState\n    })\n    setDisplay({\n      minute: state.work,\n      second: 0\n    })\n  }\n\n  const toggleTimer = () => {\n    setState(prevState => ({\n      ...prevState,\n      isRunning: !prevState.isRunning\n    }))\n  };\n\n  const checkConstraint = ({ value, type }) => {\n    if (type === \"up\") {\n      if (value + 1 > 60) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    if (type === \"down\") {\n      if (value - 1 <= 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  const handleArrowButton = ({ isWork, direction }) => {\n    if (!state.isRunning) {\n      if (isWork) {\n        switch (direction) {\n          case \"up\":\n            if (checkConstraint({ value: state.work, type: \"up\" })) {\n              return;\n            }\n            setState(prevState => ({\n              ...prevState,\n              work: prevState.work + 1\n            }));\n            break;\n          case \"down\":\n            if (checkConstraint({ value: state.work, type: \"down\" })) {\n              return;\n            }\n            setState(prevState => ({\n              ...prevState,\n              work: prevState.work - 1\n            }))\n            break;\n          default:\n        }\n      } else {\n        switch (direction) {\n          case \"up\":\n            if (checkConstraint({ value: state.rest, type: \"up\" })) {\n              return;\n            }\n            setState(prevState => ({\n              ...prevState,\n              rest: prevState.rest + 1\n            }))\n            break;\n          case \"down\":\n            if (checkConstraint({ value: state.rest, type: \"down\" })) {\n              return;\n            }\n            setState(prevState => ({\n              ...prevState,\n              rest: prevState.rest - 1\n            }))\n            break;\n          default:\n        }\n      }\n      console.log(state);\n      setDisplay({\n        minute: state.work,\n        second: 0\n      })\n    }\n  }\n  <button className=\"down\">Down</button>\n  const ControlButton = (props) => {\n    return (\n      <button onClick={props.handler} className={props.className}>{props.name}</button>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <div id=\"container\">\n        <div id=\"timer\">\n          <span>{padder(display.minute)}</span>:<span>{padder(display.second)}</span>\n        </div>\n        <div id=\"panel\">\n          <ControlButton handler={toggleTimer} name={state.isRunning ? \"Pause\" : \"Start\"} />\n          <ControlButton handler={resetTimer} name=\"Reset\" />\n          <br />\n          <br />\n          <span id=\"work\">\n            <span>{state.work}</span>\n            <ControlButton handler={() => handleArrowButton({ isWork: true, direction: \"up\" })} name=\"Up\" />\n            <ControlButton handler={() => handleArrowButton({ isWork: true, direction: \"down\" })} name=\"Down\" />\n          </span>\n          <span id=\"rest\">\n            <span>{state.rest}</span>\n            <ControlButton handler={() => handleArrowButton({ isWork: false, direction: \"up\" })} name=\"Up\" />\n            <ControlButton handler={() => handleArrowButton({ isWork: false, direction: \"down\" })} name=\"Down\" />\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// function App() {\n//   const [counter, setCounter] = useState(0);\n\n//   useEffect(() => {\n//     const interval = setInterval(() => {\n//       console.log(\"Counter: \", counter)\n//       setCounter(counter => counter + 1);\n//     }, 1000);\n\n//     return () => {\n//       clearInterval(interval);\n//     };\n//   }, []);\n\n//   return <h1>{counter}</h1>;\n// };\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}